server:
  port: 9090
spring:
  redis:
    database: 0
    timeout: 5000
    password: root123
    cluster:
      lettuce:
        pool:
          max‐idle: 50
          min‐idle: 10
          max‐active: 100
          max‐wait: 1000
      nodes:
        - 192.168.89.4:8001
        - 192.168.89.4:8004
        - 192.168.89.5:8002
        - 192.168.89.5:8003
        - 192.168.89.5:8005
        - 192.168.89.5:8006
  datasource:
    driver-class-name: com.mysql.cj.jdbc.Driver
    url: jdbc://mysql://192.168.89.5:3306/p7-study-v4?characterEncoding=utf-8&useSSL=false
    username: root
    password: root123
  rabbitmq:
    host: 192.168.89.4
    port: 5672
    virtual-host: p7_study_v4_01
    username: root
    password: root123
    publisher-returns: true
    publisher-confirm-type: CORRELATED
    listener:
      simple:
        acknowledge-mode: MANUAL
  kafka:
    bootstrap-servers:
      - 192.168.89.4:9092
      - 192.168.89.5:9092
    producer: #生产者
      retries: 3 #配置大于0的值，则客户端会将发送失败的记录重新发送
      batch-size: 16384
      buffer-memory: 33554432
      acks: 1
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.apache.kafka.common.serialization.StringSerializer
    consumer:
      group-id: default-group
      enable-auto-commit: false
      auto-offset-reset: earliest
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.apache.kafka.common.serialization.StringSerializer
    listener:
      # 当每一条记录被消费者监听器处理之后提交 RECORD
      # 当每一批poll（）的数据被消费者监听器处理之后提交 BATCH
      # 当每一批poll()的数据被消费者监听器（ListenerConsumer）处理之后，距离上次提交时间大于TIME时提交 TIME
      # 当每一批poll()的数据被消费者监听器（ListenerConsumer）处理之后，被处理record数量大于等于COUNT时提交
      # TIME | COUNT 有一个条件满足时提交
      # 当每一批poll()的数据被消费者监听器（ListenerConsumer）处理之后, 手动调用Acknowledgment.acknowledge()后提交 MANUAL
      # 手动调用Acknowledgment:acknowledge()后立即提交，一般使用这种:MANUAL_IMMEDIATE
      ack‐mode: manual_immediate

  shardingsphere:
    datasource:
      names: m1,m2
      m1:
        type: com.alibaba.druid.pool.DruidDataSource
        driver-class-name: com.mysql.cj.jdbc.Driver
        url: jdbc:mysql://192.168.89.4:3306/coursedb?serverTimezone=GMT%2B8
        username: root
        password: root123
      m2:
        type: com.alibaba.druid.pool.DruidDataSource
        driver-class-name: com.mysql.cj.jdbc.Driver
        url: jdbc:mysql://192.168.89.4:3306/coursedb2?serverTimezone=GMT%2B8
        username: root
        password: root123
    sharding:
      tables:
        course:
          actualDataNodes: m$->{1..2}.course_$->{1..2}
          keyGenerator:
            column: cid
            type: SNOWFLAKE
            props:
              worker:
                id: 1
          tableStrategy:
            inline:
              shardingColumn: cid
              algorithmExpression: course_$->{cid%2+1}
          databaseStrategy:
            inline:
              shardingColumn: cid
              algorithmExpression: m$->{cid%2+1}
        t_dict:
          actualDataNodes: m$->{1..2}.t_dict_$->{1..2}
          keyGenerator:
            column: dict_id
            type: SNOWFLAKE
            props:
              worker:
                id: 1
          tableStrategy:
            inline:
              shardingColumn: ustatus
              algorithmExpression: t_dict_$->{ustatus.toInteger()%2+1}
          databaseStrategy:
            inline:
              shardingColumn: ustatus
              algorithmExpression: m$->{ustatus.toInteger()%2+1}
        t_user:
          actualDataNodes: m$->{1..2}.t_user_$->{1..2}
          keyGenerator:
            column: user_id

            type: SNOWFLAKE
            props:
              worker:
                id: 1
          tableStrategy:
            inline:
              shardingColumn: ustatus
              algorithmExpression: t_user_$->{ustatus.toInteger()%2+1}
          databaseStrategy:
            inline:
              shardingColumn: ustatus
              algorithmExpression: m$->{ustatus.toInteger()%2+1}
      binding-tables:
        - t_user,t_dict




rocketmq:
  name-server: 192.168.89.4:9876;192.168.89.5:9876

mybatis:
  mapper-locations: classpath:mapper/*.xml
  type-aliases-package: com.yyx.zookeeper.lock
  #开启驼峰命名
  comfiguration:
    map-underscore-to-camel-case: true






