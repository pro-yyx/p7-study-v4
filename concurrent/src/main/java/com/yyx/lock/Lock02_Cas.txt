/*
package com.yyx.lock;

import lombok.extern.slf4j.Slf4j;
import sun.misc.Unsafe;

import java.util.concurrent.BrokenBarrierException;
import java.util.concurrent.CyclicBarrier;

@Slf4j
public class Lock02_Cas {
    private volatile int state = 0;

    private static CyclicBarrier cyclicBarrier = new CyclicBarrier(5);

    private static Lock02_Cas cas = new Lock02_Cas();

    public static void main(String[] args) {
        new Thread(new Worker(),"t-0").start();
        new Thread(new Worker(),"t-1").start();
        new Thread(new Worker(),"t-2").start();
        new Thread(new Worker(),"t-3").start();
        new Thread(new Worker(),"t-4").start();
    }

    static class Worker implements Runnable {

        @Override
        public void run() {
            log.info("请求:{}到达预订单，准备开抢state",Thread.currentThread().getName());
            try {
                cyclicBarrier.await();
                if (cas)
            } catch (InterruptedException e) {
                e.printStackTrace();
            } catch (BrokenBarrierException e) {
                e.printStackTrace();
            }
        }
    }

    public final boolean compareAndSwapState(int oldValue, int newValue) {
        return UNSAFE.compareAndSwapInt()
    }

    private static final Unsafe UNSAFE = Unsafe.getUnsafe();


}
*/
